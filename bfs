import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        System.out.println(bfs(n, m));
        sc.close();
    }

    static int bfs(int n, int m) {
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.offer(n);       // 初始状态：n
        visited.add(n);       // 标记已访问
        int steps = 0;        // 操作次数

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int current = queue.poll();
                if (current == m) return steps; // 找到目标，返回步数

                // 尝试 ×2 操作
                int next = current * 2;
                if (next <= 10000 && !visited.contains(next)) {
                    queue.offer(next);
                    visited.add(next);
                }

                // 尝试 -1 操作（需保持 current > 1）
                next = current - 1;
                if (next > 0 && !visited.contains(next)) {
                    queue.offer(next);
                    visited.add(next);
                }
            }
            steps++; // 每处理完一层，步数 +1
        }
        return -1; // 题目保证有解，不会执行到这里
    }
}
