import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int k = sc.nextInt();
            long x = sc.nextLong();

            int[] a = new int[n];
            long totalSum = 0;
            for (int i = 0; i < n; i++) {
                a[i] = sc.nextInt();
                totalSum += a[i];
            }

            long count = 0;
            if (totalSum * k >= x) {
                count = solveStrictOriginal(a, n, k, x, totalSum);
            }
            System.out.println(count);
        }
        sc.close();
    }

    private static long solveStrictOriginal(int[] a, int n, int k, long x, long totalSum) {

        long[] reversePrefix = new long[n + 1];
        for (int i = n - 1, j = 1; i >= 0; i--, j++) {
            reversePrefix[j] = reversePrefix[j - 1] + a[i];
        }

        long fullPeriods = (x - 1) / totalSum;
        if (fullPeriods >= k) {
            fullPeriods = k - 1;
        }
        long remaining = x - fullPeriods * totalSum;


        int left = 1, right = n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (reversePrefix[mid] >= remaining) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return (k - fullPeriods) * n - left + 1;
    }
}
